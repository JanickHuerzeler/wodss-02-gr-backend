# coding: utf-8

"""
    Kantonsservice GR

    Canton Service GR  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Incidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bfs_nr': 'int',
        '_date': 'date',
        'incidence': 'float'
    }

    attribute_map = {
        'bfs_nr': 'bfsNr',
        '_date': 'date',
        'incidence': 'incidence'
    }

    def __init__(self, bfs_nr=None, _date=None, incidence=None, _configuration=None):  # noqa: E501
        """Incidence - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bfs_nr = None
        self.__date = None
        self._incidence = None
        self.discriminator = None

        if bfs_nr is not None:
            self.bfs_nr = bfs_nr
        if _date is not None:
            self._date = _date
        if incidence is not None:
            self.incidence = incidence

    @property
    def bfs_nr(self):
        """Gets the bfs_nr of this Incidence.  # noqa: E501


        :return: The bfs_nr of this Incidence.  # noqa: E501
        :rtype: int
        """
        return self._bfs_nr

    @bfs_nr.setter
    def bfs_nr(self, bfs_nr):
        """Sets the bfs_nr of this Incidence.


        :param bfs_nr: The bfs_nr of this Incidence.  # noqa: E501
        :type: int
        """

        self._bfs_nr = bfs_nr

    @property
    def _date(self):
        """Gets the _date of this Incidence.  # noqa: E501


        :return: The _date of this Incidence.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Incidence.


        :param _date: The _date of this Incidence.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def incidence(self):
        """Gets the incidence of this Incidence.  # noqa: E501


        :return: The incidence of this Incidence.  # noqa: E501
        :rtype: float
        """
        return self._incidence

    @incidence.setter
    def incidence(self, incidence):
        """Sets the incidence of this Incidence.


        :param incidence: The incidence of this Incidence.  # noqa: E501
        :type: float
        """

        self._incidence = incidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Incidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Incidence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Incidence):
            return True

        return self.to_dict() != other.to_dict()
