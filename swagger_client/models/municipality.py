# coding: utf-8

"""
    Kantonsservice GR

    Canton Service GR  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Municipality(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bfs_nr': 'int',
        'name': 'str',
        'canton': 'str',
        'area': 'float',
        'population': 'int'
    }

    attribute_map = {
        'bfs_nr': 'bfsNr',
        'name': 'name',
        'canton': 'canton',
        'area': 'area',
        'population': 'population'
    }

    def __init__(self, bfs_nr=None, name=None, canton=None, area=None, population=None, _configuration=None):  # noqa: E501
        """Municipality - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bfs_nr = None
        self._name = None
        self._canton = None
        self._area = None
        self._population = None
        self.discriminator = None

        if bfs_nr is not None:
            self.bfs_nr = bfs_nr
        if name is not None:
            self.name = name
        if canton is not None:
            self.canton = canton
        if area is not None:
            self.area = area
        if population is not None:
            self.population = population

    @property
    def bfs_nr(self):
        """Gets the bfs_nr of this Municipality.  # noqa: E501


        :return: The bfs_nr of this Municipality.  # noqa: E501
        :rtype: int
        """
        return self._bfs_nr

    @bfs_nr.setter
    def bfs_nr(self, bfs_nr):
        """Sets the bfs_nr of this Municipality.


        :param bfs_nr: The bfs_nr of this Municipality.  # noqa: E501
        :type: int
        """

        self._bfs_nr = bfs_nr

    @property
    def name(self):
        """Gets the name of this Municipality.  # noqa: E501


        :return: The name of this Municipality.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Municipality.


        :param name: The name of this Municipality.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def canton(self):
        """Gets the canton of this Municipality.  # noqa: E501


        :return: The canton of this Municipality.  # noqa: E501
        :rtype: str
        """
        return self._canton

    @canton.setter
    def canton(self, canton):
        """Sets the canton of this Municipality.


        :param canton: The canton of this Municipality.  # noqa: E501
        :type: str
        """

        self._canton = canton

    @property
    def area(self):
        """Gets the area of this Municipality.  # noqa: E501


        :return: The area of this Municipality.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Municipality.


        :param area: The area of this Municipality.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def population(self):
        """Gets the population of this Municipality.  # noqa: E501


        :return: The population of this Municipality.  # noqa: E501
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this Municipality.


        :param population: The population of this Municipality.  # noqa: E501
        :type: int
        """

        self._population = population

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Municipality, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Municipality):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Municipality):
            return True

        return self.to_dict() != other.to_dict()

    @property
    def serialize(self):
        """Return object data in easily serializeable format"""
        return {
            'bfsNr': self._bfs_nr,
            'name': self._name,
            'canton': self._canton,
            'area': self._area,
            'population': self._population
        }
